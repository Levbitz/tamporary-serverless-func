const { type, freemem, totalmem } = require('os')
const { env } = require('process')
const { promisify } = require('util')

const Bugsnag = require('@bugsnag/js')
const osName = require('os-name')

const { name, version } = require('../../package.json')
const { log } = require('../log/logger.js')

const projectRoot = `${__dirname}/../..`

// Start a client to monitor errors
const startErrorMonitor = function({ mode = 'buildbot' }) {
  const apiKey = env.BUGSNAG_KEY
  if (!apiKey) {
    return
  }

  const releaseStage = getReleaseStage(mode)
  try {
    const errorMonitor = Bugsnag.start({
      apiKey,
      appVersion: `${name} ${version}`,
      appType: name,
      releaseStage,
      logger,
      projectRoot,
    })

    // Allows knowing the percentage of failed builds per release
    errorMonitor.startSession()

    return errorMonitor
    // Failsafe
  } catch (error) {
    log(`Error monitor could not start\n${error.stack}`)
    return
  }
}

// Based the release stage on the `mode`
const getReleaseStage = function(mode) {
  const releaseStage = MODE_TO_RELEASE_STAGE[mode]
  if (releaseStage === undefined) {
    return DEFAULT_RELEASE_STAGE
  }
  return releaseStage
}

const MODE_TO_RELEASE_STAGE = { buildbot: 'production', cli: 'cli', require: 'development' }
const DEFAULT_RELEASE_STAGE = 'unknown'

// We don't want Bugsnag logs except on warnings/errors.
// We also want to use our own `log` utility, unprefixed.
const logger = { debug() {}, info() {}, warn: log, error: log }

// Report an error for monitoring
const reportError = async function(errorMonitor, error, { severity, context, metadata }) {
  if (errorMonitor === undefined) {
    return
  }

  try {
    await promisify(errorMonitor.notify)(error, event => onError({ event, severity, context, metadata }))
    // Failsafe
  } catch (error) {
    log(`Error monitor could not notify\n${error.stack}`)
    return
  }
}

// Add more information to Bugsnag events
const onError = function({ event, severity, context, metadata }) {
  Object.assign(event, {
    severity,
    context,
    _metadata: { ...event._metadata, ...metadata },
    app: {
      ...event.app,
      osName: type(),
      osVersion: osName(),
      freeMemory: freemem(),
      totalMemory: totalmem(),
    },
  })
  return true
}

module.exports = { startErrorMonitor, reportError }
