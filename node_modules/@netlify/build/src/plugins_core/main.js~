'use strict'

const { LOCAL_INSTALL_PLUGIN_NAME } = require('../install/local')

const FUNCTIONS_INSTALL_PLUGIN = `${__dirname}/functions_install/index.js`
const DEPLOY_PLUGIN = `${__dirname}/deploy/index.js`

// List of core plugin names
const FUNCTIONS_INSTALL_PLUGIN_NAME = '@netlify/plugin-functions-install-core'
const EDGE_HANDLERS_PLUGIN_NAME = '@netlify/plugin-edge-handlers'
const DEPLOY_PLUGIN_NAME = '@netlify/plugin-deploy-core'
const DPC_PLUGIN_NAME = 'netlify-plugin-deploy-preview-commenting'
const CORE_PLUGINS = new Set([
  FUNCTIONS_INSTALL_PLUGIN_NAME,
  LOCAL_INSTALL_PLUGIN_NAME,
  EDGE_HANDLERS_PLUGIN_NAME,
  DEPLOY_PLUGIN_NAME,
  DPC_PLUGIN_NAME,
])

const EDGE_HANDLERS_PLUGIN_PATH = require.resolve(EDGE_HANDLERS_PLUGIN_NAME)
const DPC_PLUGIN_PATH = require.resolve(DPC_PLUGIN_NAME)

// Plugins that are installed and enabled by default
<<<<<<< HEAD
const getCorePlugins = function ({
  constants: { FUNCTIONS_SRC, EDGE_HANDLERS_SRC, BUILDBOT_SERVER_SOCKET },
  featureFlags,
  childEnv,
}) {
  const functionsInstallPlugin = getFunctionsInstallPlugin(FUNCTIONS_SRC)
  const edgeHandlersPlugin = getEdgeHandlersPlugin(EDGE_HANDLERS_SRC)
  const deployPlugin = getDeployPlugin(featureFlags, BUILDBOT_SERVER_SOCKET)
  const dpcPlugin = getDpcPlugin({ featureFlags, childEnv })
  return [functionsInstallPlugin, edgeHandlersPlugin, deployPlugin, dpcPlugin].filter(Boolean)
=======
const getCorePlugins = function ({ constants: { BUILDBOT_SERVER_SOCKET }, featureFlags, childEnv }) {
  const functionsPlugin = getFunctionsPlugin()
  const functionsInstallPlugin = getFunctionsInstallPlugin()
  const edgeHandlersPlugin = getEdgeHandlersPlugin()
  const deployPlugin = getDeployPlugin(featureFlags, BUILDBOT_SERVER_SOCKET)
  const dpcPlugin = getDpcPlugin({ featureFlags, childEnv })
  return [functionsPlugin, functionsInstallPlugin, edgeHandlersPlugin, deployPlugin, dpcPlugin].filter(Boolean)
}

// When no "Functions directory" is defined, it means users does not use
// Netlify Functions.
// However when it is defined but points to a non-existing directory, this
// might mean the directory is created later one, so we cannot do that check
// yet.
const getFunctionsPlugin = function () {
  return { package: FUNCTIONS_PLUGIN_NAME, pluginPath: FUNCTIONS_PLUGIN, condition: hasFunctionsDir }
>>>>>>> 9897fac08... Bundle Functions/Edge handlers if a directory is created during build
}

const getFunctionsInstallPlugin = function () {
  return {
    package: FUNCTIONS_INSTALL_PLUGIN_NAME,
    pluginPath: FUNCTIONS_INSTALL_PLUGIN,
    condition: hasFunctionsDir,
    optional: true,
  }
}

// We use a dynamic `condition` because the functions directory might be created
// by the build command or plugins
const hasFunctionsDir = function ({ constants: { FUNCTIONS_SRC } }) {
  return FUNCTIONS_SRC !== undefined
}

// To enable Edge handlers, create a `edge-handlers` directory in the build
// directory.
// The location can be overridden using the `build.edge_handlers` property in
// `netlify.toml`.
const getEdgeHandlersPlugin = function () {
  return { package: EDGE_HANDLERS_PLUGIN_NAME, pluginPath: EDGE_HANDLERS_PLUGIN_PATH, condition: hasEdgeHandlersDir }
}

// We use a dynamic `condition` because the edge handlers directory might be
// created by the build command or plugins
const hasEdgeHandlersDir = function ({ constants: { EDGE_HANDLERS_SRC } }) {
  return EDGE_HANDLERS_SRC !== undefined
}

const getDeployPlugin = function (featureFlags, BUILDBOT_SERVER_SOCKET) {
  if (!featureFlags.service_buildbot_enable_deploy_server || BUILDBOT_SERVER_SOCKET === undefined) {
    return
  }

  return { package: DEPLOY_PLUGIN_NAME, pluginPath: DEPLOY_PLUGIN }
}

const getDpcPlugin = function ({ featureFlags, childEnv: { CONTEXT } }) {
  if (!featureFlags.dpc || CONTEXT !== 'deploy-preview') {
    return
  }

  return { package: DPC_PLUGIN_NAME, pluginPath: DPC_PLUGIN_PATH }
}

const isCorePlugin = function (packageName) {
  return CORE_PLUGINS.has(packageName)
}

module.exports = { getCorePlugins, isCorePlugin }
